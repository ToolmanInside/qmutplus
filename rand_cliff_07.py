from qiskit import QuantumCircuit, execute, Aer, QuantumRegister, ClassicalRegister
num_qubits = 7

def rand_cliff_07(mqc):
    q = QuantumRegister(num_qubits)
    c = ClassicalRegister(num_qubits)
    qc = QuantumCircuit(q, c)

    for i in range(num_qubits):
        qc.h(i)

    qc = mqc.compose(qc)

    qc.z(5)
    qc.z(4)
    qc.x(3)
    qc.z(3)
    qc.x(2)
    qc.z(1)
    qc.x(0)
    qc.z(0)
    qc.h(6)
    qc.sdg(6)
    qc.h(6)
    qc.cx(6,5)
    qc.sdg(5)
    qc.cx(6,5)
    qc.sdg(5)
    qc.swap(6,5)
    qc.h(4)
    qc.cx(4,6)
    qc.cx(4,5)
    qc.h(4)
    qc.cx(6,4)
    qc.sdg(4)
    qc.cx(5,4)
    qc.cx(4,6)
    qc.h(3)
    qc.cx(3,6)
    qc.h(3)
    qc.cx(6,3)
    qc.cx(4,3)
    qc.cx(4,3)
    qc.sdg(3)
    qc.cx(6,3)
    qc.sdg(3)
    qc.cx(3,4)
    qc.h(2)
    qc.sdg(2)
    qc.cx(2,6)
    qc.cx(2,5)
    qc.cx(2,4)
    qc.cx(2,3)
    qc.h(2)
    qc.cx(5,2)
    qc.cx(4,2)
    qc.sdg(2)
    qc.cx(4,2)
    qc.cx(3,2)
    qc.cx(2,6)
    qc.cx(2,5)
    qc.cx(2,4)
    qc.cx(2,3)
    qc.h(1)
    qc.sdg(1)
    qc.cx(1,5)
    qc.cx(1,4)
    qc.cx(1,3)
    qc.h(1)
    qc.cx(5,1)
    qc.cx(4,1)
    qc.cx(3,1)
    qc.cx(2,1)
    qc.sdg(1)
    qc.cx(6,1)
    qc.cx(1,6)
    qc.cx(1,4)
    qc.cx(1,3)
    qc.swap(2,1)
    qc.h(0)
    qc.cx(0,4)
    qc.cx(0,3)
    qc.cx(0,2)
    qc.cx(0,1)
    qc.h(0)
    qc.cx(6,0)
    qc.cx(4,0)
    qc.cx(3,0)
    qc.cx(2,0)
    qc.sdg(0)
    qc.cx(4,0)
    qc.cx(1,0)
    qc.sdg(0)
    qc.cx(0,5)
    qc.cx(0,4)
    qc.cx(0,3)
    qc.swap(1,0)

    for i in range(num_qubits):
        qc.measure(i, i)

    backend = Aer.get_backend("aer_simulator")
    job = execute(qc, backend, shots = 100000).result().get_counts(qc)
    return job